package pocRegistry

import (
	"fmt"
	"github.com/12end/pocRegistry/cli"
	"github.com/12end/requests"
	"net/url"
)

func (r Registry) exploit(poc POC, actionName string, target *url.URL, trace bool, args []string) (vulnerable bool, traceInfo []requests.TraceInfo) {
	r.Logger.Info(fmt.Sprintf("Exploit %s/%s(%s) for %s,action: %s", poc.ProductName, poc.Name, poc.Alias, target.String(), actionName))
	params := cli.NewFlagSet(actionName)
	for _, exploit := range poc.Exploit {
		if exploit.Name == actionName {
			err := params.Set.Parse(args)
			if err != nil {
				fmt.Println(err)
			}
			vulnerable, traceInfo = exploit.Action(&cli.Context{Trace: trace, Target: target, Logger: r.Logger, Params: params})
			if vulnerable {
				r.Logger.Warn(fmt.Sprintf("%s has vulnerability for %s/%s!", target.String(), poc.ProductName, poc.Name))
			}
			return
		}
	}
	r.Logger.Error(fmt.Sprintf("No such action(%s) in poc: %s/%s", actionName, poc.ProductName, poc.Name))
	return
}

func (r Registry) ExecuteExploit(target *url.URL, productName string, pocName string, actionName string, args []string) (vulnerable bool) {
	if _, ok := r.pocs[productName]; ok {
		if poc, ok := r.pocs[productName][pocName]; ok {
			vulnerable, _ = r.exploit(poc, actionName, target, false, args)
			return
		} else {
			r.Logger.Error(fmt.Sprintf("No such poc(%s) in product: %s", pocName, productName))
			return false
		}
	} else {
		r.Logger.Error(fmt.Sprintf("No such product: %s", productName))
		return false
	}
}

func (r Registry) ExecuteExploitWithTrace(target *url.URL, productName string, pocName string, actionName string, args []string) (vulnerable bool, trace []requests.TraceInfo) {
	if _, ok := r.pocs[productName]; ok {
		if poc, ok := r.pocs[productName][pocName]; ok {
			vulnerable, trace = r.exploit(poc, actionName, target, true, args)
			return
		} else {
			r.Logger.Error(fmt.Sprintf("No such poc(%s) in product: %s", pocName, productName))
			return false, nil
		}
	} else {
		r.Logger.Error(fmt.Sprintf("No such product: %s", productName))
		return false, nil
	}
}
